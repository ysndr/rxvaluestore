buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        // replace with the current version of the Android plugin
        classpath 'com.android.tools.build:gradle:2.2.3'
        // the latest version of the android-apt plugin
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    }
}

plugins {
    id "me.tatarka.retrolambda" version "3.2.5"
}
apply plugin: 'com.android.library'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.1"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {}
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
//    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile "org.robolectric:robolectric:3.3.2"

    compile 'com.google.guava:guava:21.0'
    // rxjava
    compile 'io.reactivex:rxjava:1.2.6'
    compile 'io.reactivex:rxandroid:1.2.1'
    // Immutables
    apt "org.immutables:value:2.4.3" 
    // for annotation processor
    provided 'org.immutables:value:2.4.3:annotations'
    // annotation-only artifact
    provided 'org.immutables:builder:2.4.3'
    // there are only annotations anyway
    provided 'org.immutables:gson:2.4.3:annotations'
    // annotation-only artifact
    compile 'com.github.pakoito:RxTuples:1.0.0'
    compile 'com.github.pakoito:RxPaper:2.0.0'
    compile 'com.github.pakoito:RxObservableDiskCache:2.0.0'
    compile project(':library')
}

publishing {
    publications {
        androidrelease(MavenPublication) {
            groupId project.group
            version project.version
            artifactId POM_ARTIFACT_ID

//            from components.java

            artifact sourcesJar
            artifact("$buildDir/outputs/aar/android-release.aar")
//            artifact javadocJar
            fixPom(pom)
        }
    }
}

sourceSets {
    generated{
        java.srcDir "${buildDir}/generated/src/java/"
    }
}


//compileJava{
//    source    += sourceSets.generated.java
//}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

artifacts {
//    archives javadocJar
    archives sourcesJar
}

def fixPom(pom) {
    pom.withXml {
        def root = asNode()
        root.appendNode('description', POM_DESCRIPTION)
        root.appendNode('name', POM_NAME)
        root.appendNode('url', POM_URL)
        def scm = root.appendNode('scm')
        scm.appendNode('url', POM_SCM_URL)
        scm.appendNode('connection', POM_SCM_CONNECTION)
        scm.appendNode('developerConnection', POM_SCM_DEV_CONNECTION)
        def developer = root.appendNode('developers').appendNode('developer')
        developer.appendNode('id', POM_DEVELOPER_ID)
        developer.appendNode('name', POM_DEVELOPER_NAME)
        developer.appendNode('email', POM_DEVELOPER_EMAIL)
        def license = root.appendNode('licenses').appendNode('license')
        license.appendNode('name', POM_LICENCE_NAME)
        license.appendNode('url', POM_LICENCE_URL)
        license.appendNode('distribution', POM_LICENCE_DIST)
    }
}


